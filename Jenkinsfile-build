pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = "notetakingapp"
        DOCKER_IMAGE_TAG = "latest"
        MYSQL_ROOT_PASSWORD = 'rootpassword'
        MYSQL_DATABASE = 'note_taking_app'
        MYSQL_USER = 'noteuser'
        MYSQL_PASSWORD = 'password'
        MYSQL_HOST = 'mariadb'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git branch: 'main', url: 'https://github.com/randycl/notetakingapp.git'
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'maven:3.8.4-openjdk-17'
                    args '-v $HOME/.m2:/root/.m2 -v ./app:/app --network=mynetwork'
                    // reuseNode true
                }
            }
            steps {
                // Change to the directory containing the pom.xml and run Maven to build the project
                dir('note-taking-app/note-taking-app') {
                    sh 'mvn clean package'

                    sh 'cp ./target/note*.jar /app/notetakingapp.jar'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image from the correct context
                sh """
                docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f Dockerfile .
                """

            }
        }

        stage('Run Docker Container') {
            steps {
                // Run the Docker container on the custom network
                sh """
                docker run -d --name ${DOCKER_IMAGE_NAME} --network mynetwork -p 8080:8080 -v /app:/app ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                """

                sh """
                docker exec ${DOCKER_IMAGE_NAME} ls -lta /app
                """

                // Dump logs
                sh """
                docker logs ${DOCKER_IMAGE_NAME}
                """
            }
        }
    }

    post {
        always {
            // Clean up Docker containers
            //sh """
            //docker stop ${DOCKER_IMAGE_NAME} || true
            //docker rm ${DOCKER_IMAGE_NAME} || true
            //"""
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            junit '**/target/surefire-reports/*.xml'
        }
        success {
            echo 'Build and Docker packaging successful!'
        }
        failure {
            echo 'Build or Docker packaging failed.'
        }
    }
}
